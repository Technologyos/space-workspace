version: '3.8'

services:
   registry-discovery:
      container_name: eureka-server
      image: spaceservice/microservice-docker-eureka:0.0.1-SNAPSHOT
      ports:
         - 8761:8761
      environment:
         - JAVA_OPTS=
            -Xms256M
            -Xmx256M
      networks:
         - discovery-network

   configuration:
      container_name: config-server
      image: spaceservice/microservice-docker-config-server:0.0.1-SNAPSHOT
      volumes:
         - ./configs/credentials:/tmp/config-server-repo
      environment:
         - JAVA_OPTS=${JAVA_OPTS_CONFIG_SERVER}
      depends_on:
         - registry-discovery
      ports:
         - 8888:8888
      networks:
         - discovery-network

   administration:
      container_name: admin-server
      image: spaceservice/microservice-docker-adminserver:0.0.1-SNAPSHOT
      environment:
         - JAVA_OPTS=${JAVA_OPTS_ADMIN_SERVER}
      depends_on:
         - registry-discovery
      ports:
         - 8762:8762
      networks:
         - discovery-network

   apigateway:
      container_name: apigateway-service
      image: spaceservice/microservice-docker-apigateway:0.0.1-SNAPSHOT
      environment:
         - JAVA_OPTS=${JAVA_OPTS_ADMIN_SERVER}
      depends_on:
         - registry-discovery
      ports:
         - 8080:8080
      networks:
         - discovery-network

   role:
      container_name: role-service
      image: spaceservice/microservice-docker-role:0.0.1-SNAPSHOT
      environment:
         - JAVA_OPTS=${JAVA_OPTS_ROLE_SERVICE}
      depends_on:
         - registry-discovery
         - configuration
      networks:
         - discovery-network
         - postgres-network

   postgres:
     container_name: postgres-service
     image: postgres:16.1
     command: postgres -c 'max_connections=200'
     restart: always
     ports:
       - 5432:5432
     environment:
       POSTGRES_USER: ${PGS_USER}
       POSTGRES_PASSWORD: ${PGS_PASSWORD}
       POSTGRES_DB: ${PGS_DB}
       PGDATA: /tmp
     volumes:
       - postgres-data:/var/lib/postgresql/data
     healthcheck:
       test: "exit 0"
     networks:
       - postgres-network

     pgadmin:
       container_name: pgadmin-service
       image: dpage/pgadmin4:8.9
       restart: always
       environment:
         PGADMIN_DEFAULT_EMAIL: ${PGA_EMAIL}
         PGADMIN_DEFAULT_PASSWORD: ${PGA_PASSWORD}
       ports:
         - 8080:80 #Se ha eliminado la exposición del contenedor de pgAdmin al puerto 8080 en el host. Esto se hace para evitar exponer pgAdmin directamente al público y, en su lugar, conectarlo a través de una red interna.
       depends_on:
         - postgres
       networks:
         - postgres-network

volumes:
   postgres-data:
      driver: local

networks:
   discovery-network:
      driver: bridge
   postgres-network:
      driver: bridge
